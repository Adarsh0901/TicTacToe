{"version":3,"sources":["TicTacToeScreen.js","TicTacToe.js","index.js"],"names":["TicTacToeScreen","props","classes","className","onClick","index","state","clearstate","TicTacToe","useState","input","setInput","isXturn","setIsXturn","handleClick","string","Array","from","clearStates","useEffect","winner","lines","i","length","a","b","c","checkWinner","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAceA,EAXS,SAACC,GACrB,IAAMC,EAAUD,EAAME,UAAN,UAAqBF,EAAME,UAA3B,WAAgD,SAChE,OACI,mCACI,sBAAMA,UAAWD,EAASE,QAAS,kBAAMH,EAAMG,QAAQH,EAAMI,QAA7D,SACKJ,EAAMK,WCJjBC,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAiFrCC,EA/EG,WACd,MAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAc,SAACT,GACjB,IAAIU,EAASC,MAAMC,KAAKP,GACrBK,EAAOV,KAIVU,EAAOV,GAASO,EAAU,IAAM,IAChCC,GAAYD,GACZD,EAASI,KAGPG,EAAc,WAChBP,EAASJ,IAkCb,OAVAY,qBAAU,WACN,IAAIC,EArBY,WAWhB,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACnC,kBAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIhB,EAAMc,IAAMd,EAAMc,KAAOd,EAAMe,IAAMf,EAAMc,KAAOd,EAAMgB,GACxD,OAAOhB,EAAMc,GAGrB,OAAO,KAIMG,GACVP,IACCF,IACAU,MAAM,UAAD,OAAWR,EAAX,sBAGV,CAACV,IAIA,mCACI,sBAAKP,UAAU,qBAAf,UACI,mBAAGA,UAAU,UAAb,8BACA,sBAAKA,UAAU,SAAf,UACI,sBAAKA,UAAU,MAAf,UACI,cAAC,EAAD,CAAiBA,UAAU,oBAAoBG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,MACzF,cAAC,EAAD,CAAiBX,UAAU,oBAAoBG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,MACzF,cAAC,EAAD,CAAiBX,UAAU,cAAcG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,SAEvF,sBAAKX,UAAU,MAAf,UACI,cAAC,EAAD,CAAiBA,UAAU,oBAAoBG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,MACzF,cAAC,EAAD,CAAiBX,UAAU,oBAAoBG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,MACzF,cAAC,EAAD,CAAiBX,UAAU,cAAcG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,SAEvF,sBAAKX,UAAU,MAAf,UACI,cAAC,EAAD,CAAiBA,UAAU,eAAeG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,MACpF,cAAC,EAAD,CAAiBX,UAAU,eAAeG,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,MACpF,cAAC,EAAD,CAAiBR,MAAOI,EAAM,GAAIN,QAAS,kBAAIU,EAAY,YAGnE,qBAAKX,UAAU,uBAAf,SACI,wBAAQC,QAAS,kBAAKc,KAAtB,kCCzEpBW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.f508e161.chunk.js","sourcesContent":["import React from 'react'\nimport './TicTacToe.css'\n\nconst TicTacToeScreen = (props) => {\n    const classes = props.className ? `${props.className} square` : 'square'\n    return (\n        <>\n            <span className={classes} onClick={() => props.onClick(props.index)}>\n                {props.state}\n            </span>\n        </>\n    )\n}\n\nexport default TicTacToeScreen\n","import React, { useState, useEffect } from 'react'\nimport TicTacToeScreen from \"./TicTacToeScreen\";\nimport './TicTacToe.css'\n\nconst clearstate = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n\nconst TicTacToe = () => {\n    const [input, setInput] = useState(clearstate)\n    const [isXturn, setIsXturn] = useState(true)\n\n    const handleClick = (index) =>{\n        let string = Array.from(input)\n        if(string[index]){\n            return\n        }\n\n        string[index] = isXturn ? 'X' : 'O';\n        setIsXturn(!isXturn)\n        setInput(string)\n    }\n\n    const clearStates = () =>{\n        setInput(clearstate);\n    }\n\n\n    const checkWinner = () => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (input[a] && input[a] === input[b] && input[a] === input[c]) {\n                return input[a];\n            }\n        }\n        return null;\n    }\n\n    useEffect(() => {\n        let winner = checkWinner();\n        if(winner){\n            clearStates()\n            alert(`Player ${winner} wins the game`)\n        }\n        \n    }, [input])\n\n    \n    return (\n        <>\n            <div className=\"Mainpage jc-center\">\n                <p className=\"Heading\">Tic Tac Toe Game</p>\n                <div className=\"Screen\">\n                    <div className=\"Row\">\n                        <TicTacToeScreen className=\"border-down-right\" state={input[0]} onClick={()=>handleClick(0)} />\n                        <TicTacToeScreen className=\"border-down-right\" state={input[1]} onClick={()=>handleClick(1)} />\n                        <TicTacToeScreen className=\"border-down\" state={input[2]} onClick={()=>handleClick(2)} />\n                    </div>\n                    <div className=\"Row\">\n                        <TicTacToeScreen className=\"border-down-right\" state={input[3]} onClick={()=>handleClick(3)} />\n                        <TicTacToeScreen className=\"border-down-right\" state={input[4]} onClick={()=>handleClick(4)} />\n                        <TicTacToeScreen className=\"border-down\" state={input[5]} onClick={()=>handleClick(5)} />\n                    </div>\n                    <div className=\"Row\">\n                        <TicTacToeScreen className=\"border-right\" state={input[6]} onClick={()=>handleClick(6)} />\n                        <TicTacToeScreen className=\"border-right\" state={input[7]} onClick={()=>handleClick(7)} />\n                        <TicTacToeScreen state={input[8]} onClick={()=>handleClick(8)} />\n                    </div>\n                </div>\n                <div className=\"ClearState jc-center\">\n                    <button onClick={()=> clearStates()}>Clear States</button>\n                </div>\n            </div>   \n        </>\n    )\n}\n\nexport default TicTacToe\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TicTacToe from './TicTacToe';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}